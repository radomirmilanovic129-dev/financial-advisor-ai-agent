// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Financial Advisor specific fields
  hubspotAccessToken String?
  hubspotRefreshToken String?
  hubspotTokenExpiresAt DateTime?
  hubspotConnectedAt DateTime?
  
  // Agent memory and instructions
  ongoingInstructions String? @db.Text
  agentMemory         String? @db.Text
  
  // Relations
  emailEmbeddings        EmailEmbedding[]
  hubSpotContactEmbeddings HubSpotContactEmbedding[]
  tasks                  Task[]
  chatMessages           ChatMessage[]
  webhookEvents          WebhookEvent[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// RAG System - Email embeddings
model EmailEmbedding {
  id        String   @id @default(cuid())
  userId    String
  messageId String   @unique
  subject   String
  from      String
  to        String
  body      String   @db.Text
  date      DateTime
  embedding String? // Store as text for now, will be converted to vector in application
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// RAG System - HubSpot contact embeddings
model HubSpotContactEmbedding {
  id          String   @id @default(cuid())
  userId      String
  contactId   String   @unique
  firstName   String?
  lastName    String?
  email       String?
  company     String?
  phone       String?
  notes       String?  @db.Text
  properties  Json?
  embedding   String? // Store as text for now, will be converted to vector in application
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// Task Management System
model Task {
  id          String      @id @default(cuid())
  userId      String
  title       String
  description String?     @db.Text
  status      TaskStatus  @default(PENDING)
  priority    Priority    @default(MEDIUM)
  toolCalls   Json?       // Store tool call data
  context     Json?       // Store context for continuation
  result      String?     @db.Text
  error       String?     @db.Text
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  completedAt DateTime?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, status])
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Chat History
model ChatMessage {
  id             String      @id @default(cuid())
  userId         String
  conversationId String      @default("legacy")
  role           MessageRole
  content        String      @db.Text
  toolCalls      Json?
  createdAt      DateTime    @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, conversationId, createdAt])
  @@index([conversationId, createdAt])
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

// Webhook Events for proactive responses
model WebhookEvent {
  id        String   @id @default(cuid())
  userId    String
  source    String   // 'gmail', 'calendar', 'hubspot'
  eventType String
  data      Json
  processed Boolean  @default(false)
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, processed, createdAt])
}
